name: CI/CD Elixir

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  ci:
    runs-on: ubuntu-22.04
    name: Compile with mix test, format, dialyzer & unused deps check
    env:
      MIX_ENV: test
    services:
      postgres:
        image: postgres:15.2
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4

      - name: Setup Elixir
        uses: erlef/setup-beam@v1.17.3
        with:
          version-file: .tool-versions
          version-type: strict

      - name: Cache deps directory
        uses: actions/cache@v4
        id: cache-deps
        env:
          ELIXIR_VERSION: ${{ steps.setup-beam.outputs.elixir-version }}
          ERLANG_VERSION: ${{ steps.setup-beam.outputs.otp-version }}
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-${{ env.ELIXIR_VERSION }}-${{ env.ERLANG_VERSION }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ env.ELIXIR_VERSION }}-${{ env.ERLANG_VERSION }}-
            ${{ runner.os }}-mix-${{ env.ELIXIR_VERSION }}-
            ${{ runner.os }}-mix-

      - name: Cache plt files
        uses: actions/cache@v4
        env:
          EX_OTP_VERSIONS: ${{ steps.setup-beam.outputs.elixir-version }}
          KEY_BASE: plt-${{ runner.os }}-${{ env.EX_OTP_VERSIONS }}
        with:
          path: |
            priv/plts
          key: |
            ${{ env.KEY_BASE }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ env.KEY_BASE }}-

      - name: Get dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: mix deps.get

      - name: CI (compile, format, test, unused_deps)
        run: |-
          mix ci
          mix ci_dev

      - name: Coverage
        run: mix coveralls.json

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4.0.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: hjemmel/kanban

  build_push:
    runs-on: ubuntu-22.04
    needs: ci
    name: Build Docker image & push to ghcr.io
    outputs:
      unique_docker_tag: ${{ steps.get-unique-docker-tag.outputs.sha_tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Build and Push Docker Image
        id: build-and-push
        uses: ./.github/actions/package
        with:
          gh_pat: ${{ secrets.GH_PAT }}
          platforms: "linux/amd64"

      - name: Gets unique image tag
        id: get-unique-docker-tag
        if: github.ref == 'refs/heads/main'
        run: |-
          IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" \
                      | grep 'sha' \
                      | tr '\n' ' ' \
                      | awk '{print $1}')
          echo "sha_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-22.04
    needs: build_push
    name: Deploy application
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/deploy
        with:
          github_user: ${{ github.repository_owner }}
          gh_pat: ${{ secrets.GH_PAT }}
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          age_key: ${{ secrets.AGE_KEY }}
          ssh_private_key: ${{ secrets.PRIVATE_KEY }}
          image_tag: ${{ needs.build-push.outputs.unique_docker_tag }}

  build-push-arm:
    needs: [ci]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Build and Push Docker Image
        uses: ./.github/actions/package
        with:
          gh_pat: ${{ secrets.GH_PAT }}
          platforms: "linux/arm64/v8,linux/amd64"
